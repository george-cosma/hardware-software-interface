"use strict";(self.webpackChunkhardware_software_interface=self.webpackChunkhardware_software_interface||[]).push([[2834],{5680:(e,r,t)=>{t.d(r,{xA:()=>u,yg:()=>g});var n=t(6540);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var f=n.createContext({}),s=function(e){var r=n.useContext(f),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=s(e.components);return n.createElement(f.Provider,{value:r},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,f=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(t),d=a,g=c["".concat(f,".").concat(d)]||c[d]||p[d]||o;return t?n.createElement(g,i(i({ref:r},u),{},{components:t})):n.createElement(g,i({ref:r},u))}));function g(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var f in r)hasOwnProperty.call(r,f)&&(l[f]=r[f]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2221:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>f,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=t(8168),a=(t(6540),t(5680));const o={},i="Overwrite Return Address",l={unversionedId:"Lab 11 - Buffer Management. Buffer Overflow/Buffer Overflow Vulnerabilities/Drills/Tasks/Overwrite Return Address/README",id:"Lab 11 - Buffer Management. Buffer Overflow/Buffer Overflow Vulnerabilities/Drills/Tasks/Overwrite Return Address/README",title:"Overwrite Return Address",description:"In the previous exercise, we observed how values of variables stored on the stack can be overwritten.",source:"@site/docs/Lab 11 - Buffer Management. Buffer Overflow/Buffer Overflow Vulnerabilities/Drills/Tasks/Overwrite Return Address/README.md",sourceDirName:"Lab 11 - Buffer Management. Buffer Overflow/Buffer Overflow Vulnerabilities/Drills/Tasks/Overwrite Return Address",slug:"/Lab 11 - Buffer Management. Buffer Overflow/Buffer Overflow Vulnerabilities/Drills/Tasks/Overwrite Return Address/",permalink:"/hardware-software-interface/Lab 11 - Buffer Management. Buffer Overflow/Buffer Overflow Vulnerabilities/Drills/Tasks/Overwrite Return Address/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Buffer Overflow for Program Written in C",permalink:"/hardware-software-interface/Lab 11 - Buffer Management. Buffer Overflow/Buffer Overflow Vulnerabilities/Drills/Tasks/Overflow in C/"},next:{title:"Buffer Overflow for Binary",permalink:"/hardware-software-interface/Lab 11 - Buffer Management. Buffer Overflow/Buffer Overflow Vulnerabilities/Drills/Tasks/Overflow for Binary File/"}},f={},s=[],u={toc:s},c="wrapper";function p(e){let{components:r,...t}=e;return(0,a.yg)(c,(0,n.A)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"overwrite-return-address"},"Overwrite Return Address"),(0,a.yg)("p",null,"In the previous exercise, we observed how values of variables stored on the stack can be overwritten.\nRecalling how function calls are made ",(0,a.yg)("strong",{parentName:"p"},"Laboratory 9"),", the return address from a function ",(0,a.yg)("inlineCode",{parentName:"p"},"callee")," back to the ",(0,a.yg)("inlineCode",{parentName:"p"},"caller")," function is also saved on the stack."),(0,a.yg)("p",null,"Exploiting this behavior and starting from the resources in the ",(0,a.yg)("inlineCode",{parentName:"p"},"drills/tasks/overwrite-ret-addr/support/")," directory, use a buffer overflow to call the ",(0,a.yg)("inlineCode",{parentName:"p"},"void magic_function()")," by overwriting the return address in the ",(0,a.yg)("inlineCode",{parentName:"p"},"read_buffer()")," function."),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},(0,a.yg)("strong",{parentName:"p"},"IMPORTANT")," The ",(0,a.yg)("inlineCode",{parentName:"p"},"void magic_function()")," calls the ",(0,a.yg)("inlineCode",{parentName:"p"},"cowsay")," utility, which you need to install with the following command:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-Bash"},"sudo apt install cowsay\n")),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},(0,a.yg)("strong",{parentName:"p"},"HINT")," To inspect the source, use the following command:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-Bash"},"objdump -M intel -d break_this\n")),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},(0,a.yg)("strong",{parentName:"p"},"HINT")," In the ",(0,a.yg)("inlineCode",{parentName:"p"},"read_buffer()")," function, both the size of the input string and the string itself are read from the keyboard.\nAlthough the buffer is defined as ",(0,a.yg)("inlineCode",{parentName:"p"},"char buffer[64]"),", using the value ",(0,a.yg)("inlineCode",{parentName:"p"},"n")," in the ",(0,a.yg)("inlineCode",{parentName:"p"},"fgets(buffer, n, stdin)")," call allows for a buffer overflow.\nAlso, ",(0,a.yg)("inlineCode",{parentName:"p"},"fgets()")," will read a maximum of ",(0,a.yg)("inlineCode",{parentName:"p"},"n - 1")," characters;\n",(0,a.yg)("inlineCode",{parentName:"p"},"n")," can be set to a value larger than the actual length of the input string.")),(0,a.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,a.yg)("a",{parentName:"p",href:"/hardware-software-interface/Lab%2011%20-%20Buffer%20Management.%20Buffer%20Overflow/Buffer%20Overflow%20Vulnerabilities/Reading/#How-is-Buffer-Overflow-Used?"},"this")," reading material."))}p.isMDXComponent=!0}}]);